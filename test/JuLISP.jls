(toplevel
    (macrocall
        (.
            Core
            (quote
                @doc))
        "主模块\n- 利用Julia与LISP相似的语言特性，把Julia的语法以LISP的风格重现\n  - 可将Julia的抽象语法树「正向转换」成类LISP的S-表达式（故称「JuLISP」）\n  - 亦可将字符串形式的「JuLISP」反向解析成Julia代码\n"
        (module
            true
            JuLISP
            (block
                (export
                    expr2JuLISP)
                (export
                    s_expr
                    str2sexpr
                    str2sexpr_all)
                (export
                    sexpr2expr
                    parse_julisp)
                (export
                    julia2julisp
                    run_julisp
                    include_julisp
                    @julisp_str
                    @jls_str)
                (block
                    "Julia代码 => Julia AST => JuLISP"
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "把表达式里面的LineNumberNode全部去掉——即便是变成构造函数，也不应影响代码"
                        (=
                            (call
                                filter_expr
                                (::
                                    e
                                    Any))
                            (block
                                e)))
                    (=
                        (call
                            filter_expr
                            (::
                                e
                                Expr))
                        (block
                            (call
                                Expr
                                (.
                                    e
                                    (Q
                                        head))
                                (...
                                    (call
                                        map
                                        filter_expr
                                        (call
                                            filter
                                            (->
                                                x
                                                (block
                                                    (call
                                                        !
                                                        (call
                                                            isa
                                                            x
                                                            LineNumberNode))))
                                            (.
                                                e
                                                (Q
                                                    args))))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "默认的缩进单元：四个空格"
                        (const
                            (=
                                (::
                                    DEFAULT_INDENT_UNIT
                                    String)
                                "    ")))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "将Julia语法树转换成Lisp风格，简称「JuLISP」\n- 可选的「缩进层级」与「缩进单元」（空白符的种类与长度不影响语义）\n"
                        (=
                            (::
                                (call
                                    expr2JuLISP
                                    (parameters
                                        (...
                                            kw))
                                    (::
                                        s
                                        String))
                                String)
                            (block
                                (call
                                    repr
                                    s))))
                    (=
                        (::
                            (call
                                expr2JuLISP
                                (parameters
                                    (...
                                        kw))
                                (::
                                    c
                                    Char))
                            String)
                        (block
                            (call
                                repr
                                c)))
                    (=
                        (::
                            (call
                                expr2JuLISP
                                (parameters
                                    (...
                                        kw))
                                (::
                                    c
                                    Cmd))
                            String)
                        (block
                            (call
                                repr
                                c)))
                    (=
                        (::
                            (call
                                expr2JuLISP
                                (parameters
                                    (...
                                        kw))
                                (::
                                    i
                                    Integer))
                            String)
                        (block
                            (call
                                repr
                                i)))
                    (=
                        (::
                            (call
                                expr2JuLISP
                                (parameters
                                    (...
                                        kw))
                                (::
                                    f
                                    AbstractFloat))
                            String)
                        (block
                            (call
                                repr
                                f)))
                    (=
                        (::
                            (call
                                expr2JuLISP
                                (parameters
                                    (...
                                        kw))
                                (::
                                    s
                                    Symbol))
                            String)
                        (block
                            (call
                                String
                                s)))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "主代码：数组⇒批量加入+子缩进递增"
                        (=
                            (::
                                (call
                                    expr2JuLISP
                                    (parameters
                                        (kw
                                            (::
                                                indent
                                                Int)
                                            1)
                                        (kw
                                            (::
                                                indent_unit
                                                AbstractString)
                                            DEFAULT_INDENT_UNIT))
                                    (::
                                        args
                                        Vector))
                                String)
                            (block
                                (call
                                    join
                                    (call
                                        filter!
                                        (call
                                            !
                                            isempty)
                                        (comprehension
                                            (generator
                                                (call
                                                    expr2JuLISP
                                                    (parameters
                                                        (kw
                                                            indent
                                                            (call
                                                                +
                                                                indent
                                                                1)))
                                                    ex)
                                                (=
                                                    ex
                                                    args))))
                                    (call
                                        _expr_indent
                                        indent_unit
                                        indent)))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "删掉LineNumberNode（暂时的？）"
                        (=
                            (::
                                (call
                                    expr2JuLISP
                                    (parameters
                                        (kw
                                            (::
                                                indent
                                                Int)
                                            1)
                                        (kw
                                            (::
                                                indent_unit
                                                AbstractString)
                                            DEFAULT_INDENT_UNIT))
                                    (::
                                        lnn
                                        LineNumberNode))
                                String)
                            (block
                                "")))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "主代码之一：拆分成「头」「参数集」"
                        (=
                            (::
                                (call
                                    expr2JuLISP
                                    (parameters
                                        (kw
                                            (::
                                                indent
                                                Int)
                                            1)
                                        (kw
                                            (::
                                                indent_unit
                                                AbstractString)
                                            DEFAULT_INDENT_UNIT))
                                    (::
                                        e
                                        Expr))
                                String)
                            (block
                                (string
                                    "("
                                    (.
                                        e
                                        (Q
                                            head))
                                    (call
                                        _expr_indent
                                        indent_unit
                                        indent)
                                    (call
                                        expr2JuLISP
                                        (parameters
                                            (kw
                                                indent
                                                indent))
                                        (.
                                            e
                                            (Q
                                                args)))
                                    ")"))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "📌这个在文档字符串中出现。【2023-09-26 16:26:09】目前的解决办法：转换为「Code.var\"@doc\"」"
                        (=
                            (::
                                (call
                                    expr2JuLISP
                                    (parameters
                                        (...
                                            kw))
                                    (::
                                        gr
                                        GlobalRef))
                                String)
                            (block
                                (call
                                    expr2JuLISP
                                    (parameters
                                        (...
                                            kw))
                                    (call
                                        Expr
                                        (Q
                                            .)
                                        (call
                                            Symbol
                                            (.
                                                gr
                                                (Q
                                                    mod)))
                                        (call
                                            Expr
                                            (Q
                                                quote)
                                            (call
                                                Symbol
                                                (.
                                                    gr
                                                    (Q
                                                        name)))))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "处理「串联引用」的情况"
                        (=
                            (::
                                (call
                                    expr2JuLISP
                                    (parameters
                                        (...
                                            kw))
                                    (::
                                        qn
                                        QuoteNode))
                                String)
                            (block
                                (call
                                    expr2JuLISP
                                    (parameters
                                        (...
                                            kw))
                                    (call
                                        Expr
                                        (Q
                                            Q)
                                        (.
                                            qn
                                            (Q
                                                value)))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "生成缩进"
                        (=
                            (::
                                (call
                                    _expr_indent
                                    (parameters
                                        (kw
                                            (::
                                                newline
                                                Bool)
                                            true))
                                    (::
                                        unit
                                        AbstractString)
                                    (::
                                        n
                                        Integer))
                                String)
                            (block
                                (call
                                    *
                                    (if
                                        newline
                                        "\n"
                                        "")
                                    (call
                                        ^
                                        unit
                                        n))))))
                (block
                    "JuLISP => S-Expr"
                    (const
                        (=
                            JuLISPAtom
                            (curly
                                Union
                                Symbol
                                String
                                Char
                                Number
                                Bool)))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "字符串 → S-表达式の值\n- 若其中含有空白符，需要使用引号转义\n    - 示例：`123 123` --> `\"123 123\"`\n    - 转义：使用`Base.repr`方法\n    - 逆转义：使用`Meta.parse`方法（不执行代码）\n"
                        (=
                            (::
                                (call
                                    s_expr
                                    (parameters
                                        (kw
                                            (::
                                                always_escape
                                                Bool)
                                            false))
                                    (::
                                        str
                                        AbstractString))
                                AbstractString)
                            (block
                                (if
                                    (||
                                        always_escape
                                        (call
                                            any
                                            isspace
                                            str))
                                    (call
                                        (.
                                            Base
                                            (Q
                                                repr))
                                        str)
                                    str))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "原生数组→S-表达式\n\n示例：\n    `[\"A\", \"sp ace\", [\"2\", \"3\"], \"B\"]` --> `(A \"sp ace\" (2 3) B)`\n"
                        (=
                            (::
                                (call
                                    s_expr
                                    (parameters
                                        (kw
                                            (::
                                                always_escape
                                                Bool)
                                            false))
                                    (::
                                        obj
                                        (curly
                                            Vector
                                            (curly
                                                Union
                                                Vector
                                                JuLISPAtom))))
                                String)
                            (block
                                (call
                                    *
                                    '('
                                    (call
                                        join
                                        (.
                                            s_expr
                                            (tuple
                                                (parameters
                                                    always_escape)
                                                obj))
                                        ' ')
                                    ')'))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "开/闭括弧 + 引号 + 注释标识"
                        (const
                            (=
                                (::
                                    S_EXPR_OPEN_BRACKET
                                    Char)
                                '(')))
                    (const
                        (=
                            (::
                                S_EXPR_CLOSE_BRACKET
                                Char)
                            ')'))
                    (const
                        (=
                            (::
                                S_EXPR_QUOTE
                                Char)
                            '"'))
                    (const
                        (=
                            (::
                                S_EXPR_SEMI_QUOTE
                                Char)
                            '\''))
                    (const
                        (=
                            (::
                                S_EXPR_BACK_QUOTE
                                Char)
                            '`'))
                    (const
                        (=
                            (::
                                S_EXPR_COMMENT_SINGLE
                                Char)
                            ';'))
                    (const
                        (=
                            (::
                                S_EXPR_COMMENT_SINGLE_END
                                Char)
                            '\n'))
                    (const
                        (=
                            (::
                                S_EXPR_COMMENT_MULTILINE
                                Char)
                            '#'))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "S-表达式 → Tuple{Vararg{Vector}}（主入口）\n"
                        (function
                            (::
                                (call
                                    str2sexpr_all
                                    (::
                                        str
                                        AbstractString))
                                (curly
                                    Tuple
                                    (curly
                                        Vararg
                                        Vector)))
                            (block
                                (=
                                    str
                                    (call
                                        strip
                                        str))
                                "返回值类型"
                                (=
                                    (::
                                        exprs
                                        (curly
                                            Vector
                                            Vector))
                                    (vect
                                        ))
                                "起始值"
                                (local
                                    (=
                                        (tuple
                                            (::
                                                tempSExpr
                                                Vector)
                                            (::
                                                next_start
                                                Int))
                                        (call
                                            _str2sexpr
                                            str
                                            1)))
                                (while
                                    (call
                                        !
                                        (call
                                            isempty
                                            str))
                                    (block
                                        (call
                                            push!
                                            exprs
                                            tempSExpr)
                                        (=
                                            str
                                            (call
                                                strip
                                                (macrocall
                                                    @view
                                                    (ref
                                                        str
                                                        (call
                                                            :
                                                            (call
                                                                nextind
                                                                str
                                                                next_start
                                                                1)
                                                            end)))))
                                        (if
                                            (call
                                                isempty
                                                str)
                                            (block
                                                (return
                                                    (call
                                                        tuple
                                                        (...
                                                            exprs)))))
                                        (=
                                            (tuple
                                                tempSExpr
                                                next_start)
                                            (call
                                                _str2sexpr
                                                str))))
                                (call
                                    error
                                    "你似乎来到了没有结果的荒原"))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "S-表达式 → 数组（单个）\n- 参数集：\n    - str：被解析的字符串整体\n    - start：解析的开始位置\n        - 决定会在解析到何时停止（与start位置同级的下一个闭括弧）\n        - 用于递归解析\n\n示例：`(A (B C D) E \"spa ce\" 'c')` --> `[:A, [:B, :C, :D], :E, \"spa ce\", 'c']`\n"
                        (=
                            (::
                                (call
                                    str2sexpr
                                    (::
                                        str
                                        AbstractString))
                                Vector)
                            (block
                                (ref
                                    (call
                                        _str2sexpr
                                        str)
                                    1))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "内部的解析逻辑：\n- 返回: (值, 原字串str上解析的最后一个索引)\n\n参考：LISP的注释语法\n- 几乎所有LISP方言均使用分号「; ...」作为单行注释\n- 进一步地，Common LISP还能使用「#| ... |#」作为多行注释\n\n目前的注释方案（2023-09-26）\n- 在解析「原子值」时判断「是否为注释」⇒注释起始符与原子符间不能没有空白符\n- 参考一众LISP方言，使用「;」作为单行注释\n- 参考Common LISP，更简单地使用「# ... #」作为多行注释\n"
                        (function
                            (::
                                (call
                                    _str2sexpr
                                    (parameters
                                        (kw
                                            end_i
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            start
                                            Integer)
                                        1))
                                (curly
                                    Tuple
                                    Vector
                                    Int))
                            (block
                                (||
                                    (call
                                        ===
                                        (ref
                                            s
                                            start)
                                        S_EXPR_OPEN_BRACKET)
                                    (call
                                        throw
                                        (call
                                            ArgumentError
                                            (string
                                                "S-表达式必须以『(』为起始字符："
                                                s))))
                                (local
                                    (=
                                        (::
                                            result
                                            (curly
                                                Vector
                                                (curly
                                                    Union
                                                    Vector
                                                    JuLISPAtom)))
                                        (vect
                                            )))
                                (local
                                    (=
                                        (::
                                            i
                                            Int)
                                        start))
                                (local
                                    (::
                                        si
                                        Char))
                                (local
                                    (::
                                        next_index
                                        Int))
                                (while
                                    true
                                    (block
                                        (=
                                            i
                                            (call
                                                nextind
                                                s
                                                i))
                                        (&&
                                            (call
                                                >
                                                i
                                                end_i)
                                            (call
                                                error
                                                (string
                                                    "在索引「"
                                                    start
                                                    ":"
                                                    i
                                                    ":"
                                                    end_i
                                                    "」处发现无效的S-表达式「"
                                                    s
                                                    "」"
                                                    result)))
                                        (=
                                            si
                                            (ref
                                                s
                                                i))
                                        (if
                                            (call
                                                ===
                                                si
                                                S_EXPR_OPEN_BRACKET)
                                            (block
                                                (=
                                                    (tuple
                                                        (::
                                                            vec
                                                            Vector)
                                                        i_sub_end)
                                                    (call
                                                        _str2sexpr
                                                        (parameters
                                                            end_i)
                                                        s
                                                        i))
                                                (call
                                                    push!
                                                    result
                                                    vec)
                                                (=
                                                    i
                                                    i_sub_end))
                                            (elseif
                                                (block
                                                    (call
                                                        ===
                                                        si
                                                        S_EXPR_CLOSE_BRACKET))
                                                (block
                                                    (return
                                                        (tuple
                                                            result
                                                            i)))
                                                (elseif
                                                    (block
                                                        (call
                                                            !
                                                            (call
                                                                isspace
                                                                si)))
                                                    (block
                                                        (if
                                                            (call
                                                                ===
                                                                si
                                                                S_EXPR_COMMENT_SINGLE)
                                                            (block
                                                                (=
                                                                    i_sub_end
                                                                    (call
                                                                        str2sexpr_skip_comment
                                                                        (parameters
                                                                            end_i)
                                                                        S_EXPR_COMMENT_SINGLE_END
                                                                        s
                                                                        i)))
                                                            (elseif
                                                                (block
                                                                    (call
                                                                        ===
                                                                        si
                                                                        S_EXPR_COMMENT_MULTILINE))
                                                                (block
                                                                    (=
                                                                        i_sub_end
                                                                        (call
                                                                            str2sexpr_skip_comment
                                                                            (parameters
                                                                                end_i)
                                                                            S_EXPR_COMMENT_MULTILINE
                                                                            s
                                                                            i)))
                                                                (block
                                                                    (=
                                                                        (tuple
                                                                            (::
                                                                                str
                                                                                JuLISPAtom)
                                                                            i_sub_end)
                                                                        (call
                                                                            str2sexpr_atom
                                                                            (parameters
                                                                                (kw
                                                                                    start_i
                                                                                    i)
                                                                                end_i)
                                                                            s
                                                                            si))
                                                                    (call
                                                                        push!
                                                                        result
                                                                        str))))
                                                        (=
                                                            i
                                                            i_sub_end))))))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "特殊：解析S-表达式中的原子值（表达式）\n- 未转义：开头无引号\n- 已转义：开头有引号(另外实现，同时包括用单引号括起来的「字符」)\n- 数字：开头是数值字符（整数/浮点数在更细一步的地方判断）\n- ⚠只关注「是否有空格/是否遇到未转义引号」，不检测括弧\n\n返回值：\n- (解析好的字符串/符号值/数值（需要转义的也已经转义）, 原字串str上解析的最后一个索引)\n\n示例：\n`A123` --> :A123\n`137.442` --> 137.442\n`'c'` --> 'c'\n`\"sp ace()\"` --> \"sp ace()\"\n"
                        (=
                            (::
                                (call
                                    str2sexpr_atom
                                    (parameters
                                        (kw
                                            start_i
                                            1)
                                        (kw
                                            (::
                                                end_i
                                                Int)
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            si
                                            AbstractChar)
                                        (ref
                                            s
                                            1)))
                                (curly
                                    Tuple
                                    JuLISPAtom
                                    Int))
                            (block
                                (if
                                    (call
                                        ===
                                        si
                                        S_EXPR_QUOTE)
                                    (call
                                        _parse_escaped_s_expr_string
                                        (parameters
                                            end_i)
                                        s
                                        start_i)
                                    (if
                                        (call
                                            ===
                                            si
                                            S_EXPR_SEMI_QUOTE)
                                        (call
                                            _parse_escaped_s_expr_char
                                            (parameters
                                                end_i)
                                            s
                                            start_i)
                                        (if
                                            (call
                                                ===
                                                si
                                                S_EXPR_BACK_QUOTE)
                                            (call
                                                _parse_escaped_s_expr_cmd
                                                (parameters
                                                    end_i)
                                                s
                                                start_i)
                                            (if
                                                (call
                                                    isdigit
                                                    si)
                                                (call
                                                    _parse_s_expr_number
                                                    (parameters
                                                        end_i)
                                                    s
                                                    start_i)
                                                (if
                                                    (call
                                                        startswith
                                                        (ref
                                                            s
                                                            (call
                                                                :
                                                                start_i
                                                                end))
                                                        "true")
                                                    (tuple
                                                        true
                                                        (call
                                                            nextind
                                                            s
                                                            start_i
                                                            3))
                                                    (if
                                                        (call
                                                            startswith
                                                            (ref
                                                                s
                                                                (call
                                                                    :
                                                                    start_i
                                                                    end))
                                                            "false")
                                                        (tuple
                                                            false
                                                            (call
                                                                nextind
                                                                s
                                                                start_i
                                                                4))
                                                        (call
                                                            _str2sexpr_symbol
                                                            (parameters
                                                                end_i)
                                                            s
                                                            start_i))))))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "特殊：解析S-表达式中的符号\n"
                        (function
                            (::
                                (call
                                    _str2sexpr_symbol
                                    (parameters
                                        (kw
                                            end_i
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            start
                                            Integer)
                                        1))
                                (curly
                                    Tuple
                                    Symbol
                                    Int))
                            (block
                                (local
                                    (=
                                        (::
                                            start_i
                                            Int)
                                        start))
                                (local
                                    (=
                                        (::
                                            i
                                            Int)
                                        start))
                                (local
                                    (=
                                        (::
                                            si
                                            Char)
                                        (ref
                                            s
                                            i)))
                                (while
                                    (&&
                                        (call
                                            !
                                            (call
                                                isspace
                                                si))
                                        (call
                                            !=
                                            si
                                            S_EXPR_CLOSE_BRACKET))
                                    (block
                                        (=
                                            i
                                            (call
                                                nextind
                                                s
                                                i))
                                        (&&
                                            (call
                                                >
                                                i
                                                end_i)
                                            (call
                                                error
                                                (string
                                                    "无效的S-表达式符号「"
                                                    s
                                                    "」")))
                                        (=
                                            si
                                            (ref
                                                s
                                                i))))
                                (return
                                    (tuple
                                        (call
                                            Symbol
                                            (macrocall
                                                @view
                                                (ref
                                                    s
                                                    (call
                                                        :
                                                        start_i
                                                        (call
                                                            prevind
                                                            s
                                                            i)))))
                                        (call
                                            prevind
                                            s
                                            i))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "解析「需要转义的字符串」\n- start：需转义字符串在一开始所处的位置（左侧引号「\"」的位置）\n"
                        (=
                            (::
                                (call
                                    _parse_escaped_s_expr_string
                                    (parameters
                                        (kw
                                            end_i
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            start
                                            Integer)
                                        1))
                                (curly
                                    Tuple
                                    String
                                    Int))
                            (block
                                (call
                                    _parse_escaped_s_expr_str
                                    (parameters
                                        end_i)
                                    S_EXPR_QUOTE
                                    s
                                    start))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "解析「需要转义的字符」\n\n【2023-09-26 15:10:31】现在需要考虑解决「偶数个转义符」的情况\n- 如`'asd fgh \\\\'`\n"
                        (=
                            (::
                                (call
                                    _parse_escaped_s_expr_char
                                    (parameters
                                        (kw
                                            end_i
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            start
                                            Integer)
                                        1))
                                (curly
                                    Tuple
                                    Char
                                    Int))
                            (block
                                (call
                                    _parse_escaped_s_expr_str
                                    (parameters
                                        end_i)
                                    S_EXPR_SEMI_QUOTE
                                    s
                                    start))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "解析「需要转义的命令」\n- start：需转义字符串在一开始所处的位置（左侧引号「`」的位置）\n"
                        (=
                            (::
                                (call
                                    _parse_escaped_s_expr_cmd
                                    (parameters
                                        (kw
                                            end_i
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            start
                                            Integer)
                                        1))
                                (curly
                                    Tuple
                                    String
                                    Int))
                            (block
                                (call
                                    _parse_escaped_s_expr_str
                                    (parameters
                                        end_i)
                                    S_EXPR_BACK_QUOTE
                                    s
                                    start))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "通用的解析「前后引用」的方式\n- 字符串「\"」\n- 字符「'」\n- 命令「`」\n"
                        (function
                            (::
                                (call
                                    _parse_escaped_s_expr_str
                                    (parameters
                                        (kw
                                            end_i
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        embrace
                                        AbstractChar)
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            start
                                            Integer)
                                        1))
                                (curly
                                    Tuple
                                    Any
                                    Int))
                            (block
                                (local
                                    (=
                                        (::
                                            num_backslash
                                            Int)
                                        0))
                                (local
                                    (=
                                        (::
                                            start_i
                                            Int)
                                        (call
                                            nextind
                                            s
                                            start)))
                                (local
                                    (=
                                        (::
                                            i
                                            Int)
                                        start_i))
                                (&&
                                    (call
                                        >
                                        i
                                        end_i)
                                    (call
                                        error
                                        (string
                                            "无效的S-表达式串「"
                                            s
                                            "」")))
                                (while
                                    true
                                    (block
                                        (=
                                            si
                                            (ref
                                                s
                                                i))
                                        (if
                                            (call
                                                ===
                                                si
                                                '\\')
                                            (block
                                                (+=
                                                    num_backslash
                                                    1))
                                            (block
                                                (if
                                                    (&&
                                                        (call
                                                            ==
                                                            si
                                                            embrace)
                                                        (call
                                                            iseven
                                                            num_backslash))
                                                    (block
                                                        (return
                                                            (tuple
                                                                (call
                                                                    (.
                                                                        Meta
                                                                        (Q
                                                                            parse))
                                                                    (macrocall
                                                                        @view
                                                                        (ref
                                                                            s
                                                                            (call
                                                                                :
                                                                                start
                                                                                i))))
                                                                i))))
                                                (=
                                                    num_backslash
                                                    0)))
                                        (=
                                            i
                                            (call
                                                nextind
                                                s
                                                i))
                                        (&&
                                            (call
                                                >
                                                i
                                                end_i)
                                            (call
                                                error
                                                (string
                                                    "无效的S-表达式串「"
                                                    s
                                                    "」"))))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "专用的「跳过注释」方式\n- 单行注释「; ... \\n」\n- 多行注释「# ... #」\n"
                        (function
                            (::
                                (call
                                    str2sexpr_skip_comment
                                    (parameters
                                        (kw
                                            (::
                                                end_i
                                                Int)
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        terminal
                                        AbstractChar)
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            start
                                            Integer)
                                        1))
                                Int)
                            (block
                                (local
                                    (=
                                        (::
                                            i
                                            Int)
                                        (call
                                            nextind
                                            s
                                            start)))
                                (&&
                                    (call
                                        >
                                        i
                                        end_i)
                                    (call
                                        error
                                        (string
                                            "无效的S-表达式注释「"
                                            s
                                            "」")))
                                (while
                                    true
                                    (block
                                        (=
                                            si
                                            (ref
                                                s
                                                i))
                                        (&&
                                            (call
                                                ===
                                                si
                                                terminal)
                                            (return
                                                i))
                                        (=
                                            i
                                            (call
                                                nextind
                                                s
                                                i))
                                        (&&
                                            (call
                                                >
                                                i
                                                end_i)
                                            (call
                                                error
                                                (string
                                                    "无效的S-表达式注释「"
                                                    s
                                                    "」"))))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "解析数值"
                        (function
                            (::
                                (call
                                    _parse_s_expr_number
                                    (parameters
                                        (kw
                                            end_i
                                            (call
                                                lastindex
                                                s)))
                                    (::
                                        s
                                        AbstractString)
                                    (kw
                                        (::
                                            start
                                            Integer)
                                        1))
                                (curly
                                    Tuple
                                    Number
                                    Int))
                            (block
                                (local
                                    (=
                                        (::
                                            i
                                            Int)
                                        (call
                                            nextind
                                            s
                                            start)))
                                (&&
                                    (call
                                        >
                                        i
                                        end_i)
                                    (call
                                        error
                                        (string
                                            "无效的S-表达式数值「"
                                            s
                                            "」")))
                                (while
                                    true
                                    (block
                                        (=
                                            si
                                            (ref
                                                s
                                                i))
                                        (if
                                            (||
                                                (call
                                                    isspace
                                                    si)
                                                (call
                                                    ===
                                                    si
                                                    S_EXPR_CLOSE_BRACKET))
                                            (block
                                                (return
                                                    (tuple
                                                        (call
                                                            (.
                                                                Meta
                                                                (Q
                                                                    parse))
                                                            (macrocall
                                                                @view
                                                                (ref
                                                                    s
                                                                    (call
                                                                        :
                                                                        start
                                                                        (call
                                                                            prevind
                                                                            s
                                                                            i
                                                                            1)))))
                                                        (call
                                                            prevind
                                                            s
                                                            i
                                                            1)))))
                                        (=
                                            i
                                            (call
                                                nextind
                                                s
                                                i))
                                        (&&
                                            (call
                                                >
                                                i
                                                end_i)
                                            (call
                                                error
                                                (string
                                                    "无效的S-表达式数值「"
                                                    s
                                                    "」")))))))))
                (block
                    "S-Expr => Julia AST"
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "（只会在:macrocall语境下执行）识别是否是先前打包的GlobalRef"
                        (=
                            (call
                                _isPackedGlobalRef
                                (::
                                    v
                                    Vector))
                            (block
                                (&&
                                    (call
                                        >
                                        (call
                                            length
                                            v)
                                        1)
                                    (&&
                                        (call
                                            ===
                                            (macrocall
                                                @inbounds
                                                (ref
                                                    v
                                                    1))
                                            (Q
                                                call))
                                        (call
                                            ===
                                            (macrocall
                                                @inbounds
                                                (ref
                                                    v
                                                    2))
                                            (Q
                                                GlobalRef)))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "数组类型⇒取头映射 | 对「宏调用」添加行号"
                        (function
                            (::
                                (call
                                    sexpr2expr
                                    (parameters
                                        (kw
                                            (::
                                                l_num
                                                Int)
                                            0))
                                    (::
                                        s_arr
                                        (curly
                                            Vector
                                            (curly
                                                Union
                                                Vector
                                                JuLISPAtom))))
                                (curly
                                    Union
                                    Expr
                                    QuoteNode))
                            (block
                                (&&
                                    (call
                                        <
                                        (call
                                            length
                                            s_arr)
                                        1)
                                    (call
                                        error
                                        (string
                                            "表达式「"
                                            s_arr
                                            "」至少得有一个元素！")))
                                (return
                                    (if
                                        (call
                                            ===
                                            (macrocall
                                                @inbounds
                                                (ref
                                                    s_arr
                                                    1))
                                            (Q
                                                macrocall))
                                        (call
                                            Expr
                                            (macrocall
                                                @inbounds
                                                (ref
                                                    s_arr
                                                    1))
                                            (call
                                                sexpr2expr
                                                (ref
                                                    s_arr
                                                    2))
                                            (call
                                                LineNumberNode
                                                l_num
                                                "none")
                                            (...
                                                (call
                                                    map
                                                    sexpr2expr
                                                    (macrocall
                                                        @inbounds
                                                        (ref
                                                            s_arr
                                                            (call
                                                                :
                                                                3
                                                                end))))))
                                        (if
                                            (call
                                                ===
                                                (macrocall
                                                    @inbounds
                                                    (ref
                                                        s_arr
                                                        1))
                                                (Q
                                                    Q))
                                            (call
                                                QuoteNode
                                                (call
                                                    sexpr2expr
                                                    (ref
                                                        s_arr
                                                        2)))
                                            (call
                                                Expr
                                                (macrocall
                                                    @inbounds
                                                    (ref
                                                        s_arr
                                                        1))
                                                (...
                                                    (call
                                                        map
                                                        sexpr2expr
                                                        (macrocall
                                                            @inbounds
                                                            (ref
                                                                s_arr
                                                                (call
                                                                    :
                                                                    2
                                                                    end))))))))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "基础类型⇒原样返回"
                        (=
                            (::
                                (call
                                    sexpr2expr
                                    (::
                                        s_val
                                        JuLISPAtom))
                                JuLISPAtom)
                            (block
                                s_val)))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "类似`Meta.parse`，把JuLISP字符串转换成Julia表达式\n- 不会像`Meta.parse`那样对顶层的多个表达式报错\n"
                        (=
                            (::
                                (call
                                    parse_julisp
                                    (::
                                        str
                                        AbstractString))
                                Expr)
                            (block
                                (call
                                    |>
                                    (call
                                        |>
                                        str
                                        str2sexpr)
                                    sexpr2expr))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "（不导出）上面`parse_julisp`的别名"
                        (=
                            (::
                                (call
                                    parse
                                    (::
                                        str
                                        AbstractString))
                                Expr)
                            (block
                                (call
                                    parse_julisp
                                    str))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "类似`Meta.parseall`：会自动把「多个文本」"
                        (=
                            (::
                                (call
                                    parseall_julisp
                                    (::
                                        str
                                        AbstractString))
                                Expr)
                            (block
                                (call
                                    |>
                                    (call
                                        .|>
                                        (call
                                            |>
                                            str
                                            str2sexpr_all)
                                        sexpr2expr)
                                    _auto_toplevel))))
                    (=
                        (::
                            (call
                                parseall
                                (::
                                    str
                                    AbstractString))
                            Expr)
                        (block
                            (call
                                parseall_julisp
                                str)))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "自动根据「表达式是否只有一个」添加「顶层」表达式头:toplevel"
                        (=
                            (::
                                (call
                                    _auto_toplevel
                                    (::
                                        exs
                                        (curly
                                            Tuple
                                            (curly
                                                Vararg
                                                Expr))))
                                Expr)
                            (block
                                (if
                                    (call
                                        ===
                                        (call
                                            length
                                            exs)
                                        1)
                                    (macrocall
                                        @inbounds
                                        (ref
                                            exs
                                            1))
                                    (call
                                        Expr
                                        (Q
                                            toplevel)
                                        (...
                                            exs)))))))
                (block
                    "临门一脚：组合&执行"
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "Julia源码⇒JuLISP\n原理：Meta.parse + \n"
                        (=
                            (::
                                (call
                                    julia2julisp
                                    (::
                                        julia_code
                                        AbstractString))
                                AbstractString)
                            (block
                                (call
                                    |>
                                    (call
                                        |>
                                        julia_code
                                        (.
                                            Meta
                                            (Q
                                                parseall)))
                                    expr2JuLISP))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "（无错误检查功能）入口方法：运行JuLISP代码\n"
                        (=
                            (::
                                (call
                                    run_julisp
                                    (parameters
                                        (kw
                                            (::
                                                eval_F
                                                Function)
                                            (.
                                                Main
                                                (Q
                                                    eval))))
                                    (::
                                        str
                                        AbstractString))
                                Any)
                            (block
                                (ref
                                    (call
                                        .|>
                                        (call
                                            .|>
                                            (call
                                                |>
                                                str
                                                str2sexpr_all)
                                            sexpr2expr)
                                        eval_F)
                                    end))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "（不导出）上面`run_julisp`的别名"
                        (=
                            (::
                                (call
                                    run
                                    (parameters
                                        (kw
                                            (::
                                                eval_F
                                                Function)
                                            (.
                                                Main
                                                (Q
                                                    eval))))
                                    (::
                                        str
                                        AbstractString))
                                Any)
                            (block
                                (call
                                    run_julisp
                                    (parameters
                                        eval_F)
                                    str))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "入口方法：运行JuLISP代码\n- 逻辑：将JuLISP代码解析成S-表达式，再翻译成Julia AST，然后直接执行\n  - 其返回值同Julia，也是最后一个表达式返回的值\n- 参数 `tryEval`：是否使用try-catch的方式运行代码\n  - 不提供⇒直接解释执行\n  - `true`⇒每次try & catch后继续执行\n  - `false`⇒每次try & catch后不再执行\n"
                        (function
                            (::
                                (call
                                    run_julisp
                                    (parameters
                                        (kw
                                            (::
                                                eval_F
                                                Function)
                                            (.
                                                Main
                                                (Q
                                                    eval))))
                                    (::
                                        str
                                        AbstractString)
                                    (::
                                        try_eval
                                        Bool))
                                Any)
                            (block
                                (local
                                    (=
                                        (::
                                            exprs
                                            (curly
                                                Tuple
                                                (curly
                                                    Vararg
                                                    Expr)))
                                        (call
                                            .|>
                                            (call
                                                |>
                                                str
                                                str2sexpr_all)
                                            sexpr2expr)))
                                (local
                                    (::
                                        current_result
                                        Any))
                                (for
                                    (=
                                        (::
                                            expr
                                            Expr)
                                        exprs)
                                    (block
                                        (try
                                            (block
                                                (=
                                                    current_result
                                                    (call
                                                        eval_F
                                                        expr)))
                                            e
                                            (block
                                                (macrocall
                                                    @error
                                                    "执行表达式时出错！"
                                                    expr
                                                    e)
                                                (=
                                                    current_result
                                                    nothing)
                                                (||
                                                    try_eval
                                                    (break
                                                        ))))))
                                (return
                                    current_result))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "写一个字符串宏，直接执行✓"
                        (function
                            (::
                                (call
                                    JuLISP_str_macro
                                    (parameters
                                        (kw
                                            (::
                                                eval_F
                                                Function)
                                            (.
                                                Main
                                                (Q
                                                    eval))))
                                    (::
                                        str
                                        AbstractString))
                                Expr)
                            (block
                                (return
                                    (quote
                                        (call
                                            run_julisp
                                            ($
                                                str)))))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "通过简单的字符串调用，自动解释执行JuLISP代码"
                        (macro
                            (call
                                julisp_str
                                (::
                                    str
                                    AbstractString))
                            (block
                                (return
                                    (call
                                        JuLISP_str_macro
                                        str)))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "（简写名）通过简单的字符串调用，自动解释执行JuLISP代码"
                        (macro
                            (call
                                jls_str
                                (::
                                    str
                                    AbstractString))
                            (block
                                (return
                                    (call
                                        JuLISP_str_macro
                                        str)))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "读取一个文件，自动解释执行其中的JuLISP代码"
                        (=
                            (::
                                (call
                                    include_julisp
                                    (parameters
                                        (...
                                            kw))
                                    (::
                                        path
                                        AbstractString)
                                    (...
                                        args))
                                Any)
                            (block
                                (call
                                    run_julisp
                                    (parameters
                                        (...
                                            kw))
                                    (call
                                        |>
                                        (call
                                            |>
                                            path
                                            read)
                                        String)
                                    (...
                                        args)))))
                    (macrocall
                        (.
                            Core
                            (quote
                                @doc))
                        "（不导出）上面`include_julisp`的别名"
                        (=
                            (::
                                (call
                                    include
                                    (parameters
                                        (...
                                            kw))
                                    (::
                                        str
                                        AbstractString)
                                    (...
                                        args))
                                Any)
                            (block
                                (call
                                    include_julisp
                                    (parameters
                                        (...
                                            kw))
                                    str
                                    (...
                                        args))))))))))